-- Table: public.Recomendacion_e_intervencion

-- DROP TABLE IF EXISTS public."Recomendacion_e_intervencion";

CREATE TABLE IF NOT EXISTS public."Recomendacion_e_intervencion"
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    control_fitosanitario boolean NOT NULL,
    erradicacion boolean NOT NULL,
    poda_aclareo boolean NOT NULL,
    poda_equilibrio boolean NOT NULL,
    poda_formacion boolean NOT NULL,
    poda_limpieza boolean NOT NULL,
    poda_realce boolean NOT NULL,
    poda_ramas_laterales boolean NOT NULL,
    poda_ramas_secas boolean NOT NULL,
    poda_sanitaria boolean NOT NULL,
    poda_redes_secundarias boolean NOT NULL,
    poda_limpieza_parasitas boolean NOT NULL,
    poda_despeje_redes boolean NOT NULL,
    poda_reduccion_altura boolean NOT NULL,
    transplante boolean NOT NULL,
    eliminar_piso_duro boolean NOT NULL,
    otros_control_fitosanitario boolean NOT NULL,
    porque_tala text COLLATE pg_catalog."default",
    comentarios text COLLATE pg_catalog."default",
    creado date NOT NULL,
    modificadopor text COLLATE pg_catalog."default",
    actualizado timestamp with time zone,
    version date,
    arbol_id_id bigint NOT NULL,
    comentarios_control_fitosanitario text COLLATE pg_catalog."default",
    CONSTRAINT "Recomendacion_e_intervencion_pkey" PRIMARY KEY (id),
    CONSTRAINT "Recomendacion_e_intervencion_arbol_id_id_45865e03_fk_arbol_id" FOREIGN KEY (arbol_id_id)
        REFERENCES public.arbol (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Recomendacion_e_intervencion"
    OWNER to postgres;
-- Index: Recomendacion_e_intervencion_arbol_id_id_45865e03

-- DROP INDEX IF EXISTS public."Recomendacion_e_intervencion_arbol_id_id_45865e03";

CREATE INDEX IF NOT EXISTS "Recomendacion_e_intervencion_arbol_id_id_45865e03"
    ON public."Recomendacion_e_intervencion" USING btree
    (arbol_id_id ASC NULLS LAST)
    TABLESPACE pg_default;


-- Table: public.arbol

-- DROP TABLE IF EXISTS public.arbol;

CREATE TABLE IF NOT EXISTS public.arbol
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    arbolid bigint NOT NULL,
    codigo text COLLATE pg_catalog."default" NOT NULL,
    "Placa_ant" text COLLATE pg_catalog."default",
    qrcode character varying(200) COLLATE pg_catalog."default" NOT NULL,
    barrio text COLLATE pg_catalog."default" NOT NULL,
    direccion text COLLATE pg_catalog."default" NOT NULL,
    comuna character varying(2) COLLATE pg_catalog."default" NOT NULL,
    latitud double precision NOT NULL,
    longitud double precision NOT NULL,
    norte double precision NOT NULL,
    este double precision NOT NULL,
    nombre_comun text COLLATE pg_catalog."default" NOT NULL,
    nombre_cientifico text COLLATE pg_catalog."default" NOT NULL,
    familia text COLLATE pg_catalog."default" NOT NULL,
    genero text COLLATE pg_catalog."default" NOT NULL,
    madurez text COLLATE pg_catalog."default" NOT NULL,
    especie text COLLATE pg_catalog."default" NOT NULL,
    tipo_vegetacion text COLLATE pg_catalog."default" NOT NULL,
    area double precision,
    perimetro double precision,
    hito text COLLATE pg_catalog."default",
    estado_conservacion text COLLATE pg_catalog."default",
    intervencion text COLLATE pg_catalog."default",
    cobertura text COLLATE pg_catalog."default" NOT NULL,
    emplazamiento text COLLATE pg_catalog."default" NOT NULL,
    confinamiento boolean NOT NULL,
    dist_confinamiento integer,
    foto1 character varying(100) COLLATE pg_catalog."default" NOT NULL,
    foto2 character varying(100) COLLATE pg_catalog."default" NOT NULL,
    foto3 character varying(100) COLLATE pg_catalog."default" NOT NULL,
    foto4 character varying(100) COLLATE pg_catalog."default" NOT NULL,
    observaciones text COLLATE pg_catalog."default",
    habilitado boolean NOT NULL,
    estado text COLLATE pg_catalog."default",
    creado_por_id bigint NOT NULL,
    creado timestamp with time zone NOT NULL,
    modificado_por bigint,
    actualizado timestamp with time zone NOT NULL,
    version date NOT NULL,
    requiere_revision boolean NOT NULL,
    CONSTRAINT arbol_pkey PRIMARY KEY (id),
    CONSTRAINT arbol_creado_por_id_ce006006_fk_usuarios_usuario_cedula_usuario FOREIGN KEY (creado_por_id)
        REFERENCES public.usuarios_usuario (cedula_usuario) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.arbol
    OWNER to postgres;
-- Index: arbol_creado_por_id_ce006006

-- DROP INDEX IF EXISTS public.arbol_creado_por_id_ce006006;

CREATE INDEX IF NOT EXISTS arbol_creado_por_id_ce006006
    ON public.arbol USING btree
    (creado_por_id ASC NULLS LAST)
    TABLESPACE pg_default;


-- Table: public.auth_group

-- DROP TABLE IF EXISTS public.auth_group;

CREATE TABLE IF NOT EXISTS public.auth_group
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(150) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT auth_group_pkey PRIMARY KEY (id),
    CONSTRAINT auth_group_name_key UNIQUE (name)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.auth_group
    OWNER to postgres;
-- Index: auth_group_name_a6ea08ec_like

-- DROP INDEX IF EXISTS public.auth_group_name_a6ea08ec_like;

CREATE INDEX IF NOT EXISTS auth_group_name_a6ea08ec_like
    ON public.auth_group USING btree
    (name COLLATE pg_catalog."default" varchar_pattern_ops ASC NULLS LAST)
    TABLESPACE pg_default;



-- Table: public.auth_group_permissions

-- DROP TABLE IF EXISTS public.auth_group_permissions;

CREATE TABLE IF NOT EXISTS public.auth_group_permissions
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    group_id integer NOT NULL,
    permission_id integer NOT NULL,
    CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id),
    CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id),
    CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id)
        REFERENCES public.auth_permission (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED,
    CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id)
        REFERENCES public.auth_group (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.auth_group_permissions
    OWNER to postgres;
-- Index: auth_group_permissions_group_id_b120cbf9

-- DROP INDEX IF EXISTS public.auth_group_permissions_group_id_b120cbf9;

CREATE INDEX IF NOT EXISTS auth_group_permissions_group_id_b120cbf9
    ON public.auth_group_permissions USING btree
    (group_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: auth_group_permissions_permission_id_84c5c92e

-- DROP INDEX IF EXISTS public.auth_group_permissions_permission_id_84c5c92e;

CREATE INDEX IF NOT EXISTS auth_group_permissions_permission_id_84c5c92e
    ON public.auth_group_permissions USING btree
    (permission_id ASC NULLS LAST)
    TABLESPACE pg_default;

-- Table: public.auth_permission

-- DROP TABLE IF EXISTS public.auth_permission;

CREATE TABLE IF NOT EXISTS public.auth_permission
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT auth_permission_pkey PRIMARY KEY (id),
    CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename),
    CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id)
        REFERENCES public.django_content_type (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.auth_permission
    OWNER to postgres;
-- Index: auth_permission_content_type_id_2f476e4b

-- DROP INDEX IF EXISTS public.auth_permission_content_type_id_2f476e4b;

CREATE INDEX IF NOT EXISTS auth_permission_content_type_id_2f476e4b
    ON public.auth_permission USING btree
    (content_type_id ASC NULLS LAST)
    TABLESPACE pg_default;


-- Table: public.auth_user

-- DROP TABLE IF EXISTS public.auth_user;

CREATE TABLE IF NOT EXISTS public.auth_user
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    password character varying(128) COLLATE pg_catalog."default" NOT NULL,
    last_login timestamp with time zone,
    is_superuser boolean NOT NULL,
    username character varying(150) COLLATE pg_catalog."default" NOT NULL,
    first_name character varying(150) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(150) COLLATE pg_catalog."default" NOT NULL,
    email character varying(254) COLLATE pg_catalog."default" NOT NULL,
    is_staff boolean NOT NULL,
    is_active boolean NOT NULL,
    date_joined timestamp with time zone NOT NULL,
    CONSTRAINT auth_user_pkey PRIMARY KEY (id),
    CONSTRAINT auth_user_username_key UNIQUE (username)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.auth_user
    OWNER to postgres;
-- Index: auth_user_username_6821ab7c_like

-- DROP INDEX IF EXISTS public.auth_user_username_6821ab7c_like;

CREATE INDEX IF NOT EXISTS auth_user_username_6821ab7c_like
    ON public.auth_user USING btree
    (username COLLATE pg_catalog."default" varchar_pattern_ops ASC NULLS LAST)
    TABLESPACE pg_default;

-- Table: public.auth_user_groups

-- DROP TABLE IF EXISTS public.auth_user_groups;

CREATE TABLE IF NOT EXISTS public.auth_user_groups
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    user_id integer NOT NULL,
    group_id integer NOT NULL,
    CONSTRAINT auth_user_groups_pkey PRIMARY KEY (id),
    CONSTRAINT auth_user_groups_user_id_group_id_94350c0c_uniq UNIQUE (user_id, group_id),
    CONSTRAINT auth_user_groups_group_id_97559544_fk_auth_group_id FOREIGN KEY (group_id)
        REFERENCES public.auth_group (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED,
    CONSTRAINT auth_user_groups_user_id_6a12ed8b_fk_auth_user_id FOREIGN KEY (user_id)
        REFERENCES public.auth_user (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.auth_user_groups
    OWNER to postgres;
-- Index: auth_user_groups_group_id_97559544

-- DROP INDEX IF EXISTS public.auth_user_groups_group_id_97559544;

CREATE INDEX IF NOT EXISTS auth_user_groups_group_id_97559544
    ON public.auth_user_groups USING btree
    (group_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: auth_user_groups_user_id_6a12ed8b

-- DROP INDEX IF EXISTS public.auth_user_groups_user_id_6a12ed8b;

CREATE INDEX IF NOT EXISTS auth_user_groups_user_id_6a12ed8b
    ON public.auth_user_groups USING btree
    (user_id ASC NULLS LAST)
    TABLESPACE pg_default;

-- Table: public.auth_user_user_permissions

-- DROP TABLE IF EXISTS public.auth_user_user_permissions;

CREATE TABLE IF NOT EXISTS public.auth_user_user_permissions
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    user_id integer NOT NULL,
    permission_id integer NOT NULL,
    CONSTRAINT auth_user_user_permissions_pkey PRIMARY KEY (id),
    CONSTRAINT auth_user_user_permissions_user_id_permission_id_14a6b632_uniq UNIQUE (user_id, permission_id),
    CONSTRAINT auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm FOREIGN KEY (permission_id)
        REFERENCES public.auth_permission (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED,
    CONSTRAINT auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id FOREIGN KEY (user_id)
        REFERENCES public.auth_user (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.auth_user_user_permissions
    OWNER to postgres;
-- Index: auth_user_user_permissions_permission_id_1fbb5f2c

-- DROP INDEX IF EXISTS public.auth_user_user_permissions_permission_id_1fbb5f2c;

CREATE INDEX IF NOT EXISTS auth_user_user_permissions_permission_id_1fbb5f2c
    ON public.auth_user_user_permissions USING btree
    (permission_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: auth_user_user_permissions_user_id_a95ead1b

-- DROP INDEX IF EXISTS public.auth_user_user_permissions_user_id_a95ead1b;

CREATE INDEX IF NOT EXISTS auth_user_user_permissions_user_id_a95ead1b
    ON public.auth_user_user_permissions USING btree
    (user_id ASC NULLS LAST)
    TABLESPACE pg_default;

-- Table: public.dasometria

-- DROP TABLE IF EXISTS public.dasometria;

CREATE TABLE IF NOT EXISTS public.dasometria
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    fuste text COLLATE pg_catalog."default" NOT NULL,
    numtallos integer,
    cap integer,
    cap1 integer,
    cap2 integer,
    cap3 integer,
    cap4 integer,
    cap5 integer,
    altura_fuste double precision NOT NULL,
    altura_arbol double precision NOT NULL,
    circunferencia double precision,
    diacopa_mayor double precision NOT NULL,
    diacopa_menor double precision NOT NULL,
    inclinacion text COLLATE pg_catalog."default",
    orientacion text COLLATE pg_catalog."default",
    copaviva double precision,
    copausente double precision,
    expcopaluz text COLLATE pg_catalog."default" NOT NULL,
    tiporaiz text COLLATE pg_catalog."default" NOT NULL,
    diametro_ramas text COLLATE pg_catalog."default",
    comentarios text COLLATE pg_catalog."default",
    modificadopor text COLLATE pg_catalog."default",
    actualizado timestamp with time zone,
    version date,
    arbol_id_id bigint NOT NULL,
    CONSTRAINT dasometria_pkey PRIMARY KEY (id),
    CONSTRAINT dasometria_arbol_id_id_4174a6c8_fk_arbol_id FOREIGN KEY (arbol_id_id)
        REFERENCES public.arbol (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.dasometria
    OWNER to postgres;
-- Index: dasometria_arbol_id_id_4174a6c8

-- DROP INDEX IF EXISTS public.dasometria_arbol_id_id_4174a6c8;

CREATE INDEX IF NOT EXISTS dasometria_arbol_id_id_4174a6c8
    ON public.dasometria USING btree
    (arbol_id_id ASC NULLS LAST)
    TABLESPACE pg_default;

-- Table: public.django_admin_log

-- DROP TABLE IF EXISTS public.django_admin_log;

CREATE TABLE IF NOT EXISTS public.django_admin_log
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    action_time timestamp with time zone NOT NULL,
    object_id text COLLATE pg_catalog."default",
    object_repr character varying(200) COLLATE pg_catalog."default" NOT NULL,
    action_flag smallint NOT NULL,
    change_message text COLLATE pg_catalog."default" NOT NULL,
    content_type_id integer,
    user_id integer NOT NULL,
    CONSTRAINT django_admin_log_pkey PRIMARY KEY (id),
    CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id)
        REFERENCES public.django_content_type (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED,
    CONSTRAINT django_admin_log_user_id_c564eba6_fk_auth_user_id FOREIGN KEY (user_id)
        REFERENCES public.auth_user (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED,
    CONSTRAINT django_admin_log_action_flag_check CHECK (action_flag >= 0)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.django_admin_log
    OWNER to postgres;
-- Index: django_admin_log_content_type_id_c4bce8eb

-- DROP INDEX IF EXISTS public.django_admin_log_content_type_id_c4bce8eb;

CREATE INDEX IF NOT EXISTS django_admin_log_content_type_id_c4bce8eb
    ON public.django_admin_log USING btree
    (content_type_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: django_admin_log_user_id_c564eba6

-- DROP INDEX IF EXISTS public.django_admin_log_user_id_c564eba6;

CREATE INDEX IF NOT EXISTS django_admin_log_user_id_c564eba6
    ON public.django_admin_log USING btree
    (user_id ASC NULLS LAST)
    TABLESPACE pg_default;

-- Table: public.django_content_type

-- DROP TABLE IF EXISTS public.django_content_type;

CREATE TABLE IF NOT EXISTS public.django_content_type
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    app_label character varying(100) COLLATE pg_catalog."default" NOT NULL,
    model character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT django_content_type_pkey PRIMARY KEY (id),
    CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.django_content_type
    OWNER to postgres;


-- Table: public.django_migrations

-- DROP TABLE IF EXISTS public.django_migrations;

CREATE TABLE IF NOT EXISTS public.django_migrations
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    app character varying(255) COLLATE pg_catalog."default" NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    applied timestamp with time zone NOT NULL,
    CONSTRAINT django_migrations_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.django_migrations
    OWNER to postgres;

-- Table: public.django_session

-- DROP TABLE IF EXISTS public.django_session;

CREATE TABLE IF NOT EXISTS public.django_session
(
    session_key character varying(40) COLLATE pg_catalog."default" NOT NULL,
    session_data text COLLATE pg_catalog."default" NOT NULL,
    expire_date timestamp with time zone NOT NULL,
    CONSTRAINT django_session_pkey PRIMARY KEY (session_key)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.django_session
    OWNER to postgres;
-- Index: django_session_expire_date_a5c62663

-- DROP INDEX IF EXISTS public.django_session_expire_date_a5c62663;

CREATE INDEX IF NOT EXISTS django_session_expire_date_a5c62663
    ON public.django_session USING btree
    (expire_date ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: django_session_session_key_c0390e0f_like

-- DROP INDEX IF EXISTS public.django_session_session_key_c0390e0f_like;

CREATE INDEX IF NOT EXISTS django_session_session_key_c0390e0f_like
    ON public.django_session USING btree
    (session_key COLLATE pg_catalog."default" varchar_pattern_ops ASC NULLS LAST)
    TABLESPACE pg_default;

-- Table: public.estadoFitosanitario

-- DROP TABLE IF EXISTS public."estadoFitosanitario";

CREATE TABLE IF NOT EXISTS public."estadoFitosanitario"
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    vitalidad text COLLATE pg_catalog."default" NOT NULL,
    mecanica_fuste boolean NOT NULL,
    mecanica_copa boolean NOT NULL,
    mecanica_raiz boolean NOT NULL,
    biologica_fuste boolean NOT NULL,
    biologica_copa boolean NOT NULL,
    biologica_raiz boolean NOT NULL,
    antropologica_fuste boolean NOT NULL,
    antropologica_copa boolean NOT NULL,
    antropologica_raiz boolean NOT NULL,
    mecanica_f_heridas boolean NOT NULL,
    mecanica_f_anillado boolean NOT NULL,
    mecanica_f_quemaduras boolean NOT NULL,
    biologica_f_perfobarrenado boolean NOT NULL,
    biologica_f_necrosis boolean NOT NULL,
    biologica_f_descortezado boolean NOT NULL,
    biologica_f_tumores boolean NOT NULL,
    antropica_f_poda boolean NOT NULL,
    antropica_f_escombros boolean NOT NULL,
    antropica_f_pintura boolean NOT NULL,
    mecanica_c_heridas boolean NOT NULL,
    mecanica_c_quemaduras boolean NOT NULL,
    biologica_c_defoliacion boolean NOT NULL,
    biologica_c_clorosis boolean NOT NULL,
    biologica_c_minado boolean NOT NULL,
    biologica_c_necrosis boolean NOT NULL,
    biologica_c_parasitas boolean NOT NULL,
    antropica_c_poda boolean NOT NULL,
    antropica_c_contamatmosferica boolean NOT NULL,
    mecanica_r_heridas boolean NOT NULL,
    mecanica_r_quemaduras boolean NOT NULL,
    biologica_r_necrosis boolean NOT NULL,
    antropica_r_poda boolean NOT NULL,
    antropica_r_escombro boolean NOT NULL,
    antropica_r_prd_toxicos boolean NOT NULL,
    general_f_sano boolean NOT NULL,
    general_c_sano boolean NOT NULL,
    general_r_sano boolean NOT NULL,
    comentarios text COLLATE pg_catalog."default",
    modificadopor text COLLATE pg_catalog."default",
    actualizado timestamp with time zone,
    version date,
    arbol_id_id bigint NOT NULL,
    CONSTRAINT "estadoFitosanitario_pkey" PRIMARY KEY (id),
    CONSTRAINT "estadoFitosanitario_arbol_id_id_ebe07b34_fk_arbol_id" FOREIGN KEY (arbol_id_id)
        REFERENCES public.arbol (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."estadoFitosanitario"
    OWNER to postgres;
-- Index: estadoFitosanitario_arbol_id_id_ebe07b34

-- DROP INDEX IF EXISTS public."estadoFitosanitario_arbol_id_id_ebe07b34";

CREATE INDEX IF NOT EXISTS "estadoFitosanitario_arbol_id_id_ebe07b34"
    ON public."estadoFitosanitario" USING btree
    (arbol_id_id ASC NULLS LAST)
    TABLESPACE pg_default;

-- Table: public.usuarios_usuario

-- DROP TABLE IF EXISTS public.usuarios_usuario;

CREATE TABLE IF NOT EXISTS public.usuarios_usuario
(
    user_ptr_id integer NOT NULL,
    cedula_usuario bigint NOT NULL,
    foto character varying(100) COLLATE pg_catalog."default" NOT NULL,
    direccion text COLLATE pg_catalog."default" NOT NULL,
    telefono bigint NOT NULL,
    rol text COLLATE pg_catalog."default" NOT NULL,
    "Grupo" text COLLATE pg_catalog."default",
    CONSTRAINT usuarios_usuario_pkey PRIMARY KEY (cedula_usuario),
    CONSTRAINT usuarios_usuario_user_ptr_id_key UNIQUE (user_ptr_id),
    CONSTRAINT usuarios_usuario_user_ptr_id_9b4e8fdf_fk_auth_user_id FOREIGN KEY (user_ptr_id)
        REFERENCES public.auth_user (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.usuarios_usuario
    OWNER to postgres;

-- Table: public.vulnerabilidad

-- DROP TABLE IF EXISTS public.vulnerabilidad;

CREATE TABLE IF NOT EXISTS public.vulnerabilidad
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    personas boolean NOT NULL,
    vehiculos boolean NOT NULL,
    construcciones boolean NOT NULL,
    redes_aereas boolean NOT NULL,
    comentarios text COLLATE pg_catalog."default",
    creado date NOT NULL,
    modificadopor text COLLATE pg_catalog."default",
    actualizado timestamp with time zone,
    version date,
    arbol_id_id bigint NOT NULL,
    CONSTRAINT vulnerabilidad_pkey PRIMARY KEY (id),
    CONSTRAINT vulnerabilidad_arbol_id_id_5ef4eb86_fk_arbol_id FOREIGN KEY (arbol_id_id)
        REFERENCES public.arbol (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        DEFERRABLE INITIALLY DEFERRED
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.vulnerabilidad
    OWNER to postgres;
-- Index: vulnerabilidad_arbol_id_id_5ef4eb86

-- DROP INDEX IF EXISTS public.vulnerabilidad_arbol_id_id_5ef4eb86;

CREATE INDEX IF NOT EXISTS vulnerabilidad_arbol_id_id_5ef4eb86
    ON public.vulnerabilidad USING btree
    (arbol_id_id ASC NULLS LAST)
    TABLESPACE pg_default;

